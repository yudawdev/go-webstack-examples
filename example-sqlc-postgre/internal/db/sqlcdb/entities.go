// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlcdb

import (
	"database/sql/driver"
	"fmt"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

type OrderStatus string

const (
	OrderStatusInit      OrderStatus = "init"
	OrderStatusPending   OrderStatus = "pending"
	OrderStatusExecuting OrderStatus = "executing"
	OrderStatusFailed    OrderStatus = "failed"
	OrderStatusDone      OrderStatus = "done"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

func (e OrderStatus) Valid() bool {
	switch e {
	case OrderStatusInit,
		OrderStatusPending,
		OrderStatusExecuting,
		OrderStatusFailed,
		OrderStatusDone:
		return true
	}
	return false
}

func AllOrderStatusValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusInit,
		OrderStatusPending,
		OrderStatusExecuting,
		OrderStatusFailed,
		OrderStatusDone,
	}
}

type Author struct {
	ID   int64
	Name string
	Bio  pgtype.Text
}

type Order struct {
	ID        uuid.UUID
	AccountID uuid.UUID
	Symbol    string
	Quantity  decimal.Decimal
	Fees      []byte
	Status    OrderStatus
	Version   int32
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}
