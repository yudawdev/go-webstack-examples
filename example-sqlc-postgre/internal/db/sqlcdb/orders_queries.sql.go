// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orders_queries.sql

package sqlcdb

import (
	"context"

	uuid "github.com/gofrs/uuid/v5"
	"github.com/shopspring/decimal"
)

const GetOrdersByStatuses = `-- name: GetOrdersByStatuses :many
SELECT id, account_id, symbol, quantity, fees, status, type, version, created_at, updated_at
FROM orders
WHERE status::text = ANY($1::text[])
ORDER BY created_at DESC
`

func (q *Queries) GetOrdersByStatuses(ctx context.Context, dollar_1 []string) ([]*Order, error) {
	rows, err := q.db.Query(ctx, GetOrdersByStatuses, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Symbol,
			&i.Quantity,
			&i.Fees,
			&i.Status,
			&i.Type,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpsertOrders = `-- name: UpsertOrders :exec
INSERT INTO "orders"(id,
                     account_id,
                     symbol,
                     quantity,
                     fees,
                     status,
                     type,
                     version)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8) ON CONFLICT (id) DO
UPDATE
    SET quantity = EXCLUDED.quantity,
    fees = EXCLUDED.fees,
    status = EXCLUDED.status,
    type = EXCLUDED.type,
    version = EXCLUDED.version
WHERE orders.version <= EXCLUDED.version
`

type UpsertOrdersParams struct {
	ID        string
	AccountID uuid.UUID
	Symbol    string
	Quantity  decimal.Decimal
	Fees      []byte
	Status    OrderStatus
	Type      OrderType
	Version   int32
}

func (q *Queries) UpsertOrders(ctx context.Context, arg *UpsertOrdersParams) error {
	_, err := q.db.Exec(ctx, UpsertOrders,
		arg.ID,
		arg.AccountID,
		arg.Symbol,
		arg.Quantity,
		arg.Fees,
		arg.Status,
		arg.Type,
		arg.Version,
	)
	return err
}
