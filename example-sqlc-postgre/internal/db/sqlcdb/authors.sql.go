// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: authors.sql

package sqlcdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
    name, bio
) VALUES (
             $1, $2
         )
    RETURNING id, name, bio
`

type CreateAuthorParams struct {
	Name string
	Bio  pgtype.Text
}

func (q *Queries) CreateAuthor(ctx context.Context, arg *CreateAuthorParams) (*Author, error) {
	row := q.db.QueryRow(ctx, CreateAuthor, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return &i, err
}

const DeleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, DeleteAuthor, id)
	return err
}

const GetAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (*Author, error) {
	row := q.db.QueryRow(ctx, GetAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return &i, err
}

const ListAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]*Author, error) {
	rows, err := q.db.Query(ctx, ListAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors
SET name = $2, bio = $3
WHERE id = $1
`

type UpdateAuthorParams struct {
	ID   int64
	Name string
	Bio  pgtype.Text
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg *UpdateAuthorParams) error {
	_, err := q.db.Exec(ctx, UpdateAuthor, arg.ID, arg.Name, arg.Bio)
	return err
}

const UpdateAuthorReturnRecord = `-- name: UpdateAuthorReturnRecord :one
UPDATE authors
SET name = $2, bio = $3
WHERE id = $1
    RETURNING id, name, bio
`

type UpdateAuthorReturnRecordParams struct {
	ID   int64
	Name string
	Bio  pgtype.Text
}

func (q *Queries) UpdateAuthorReturnRecord(ctx context.Context, arg *UpdateAuthorReturnRecordParams) (*Author, error) {
	row := q.db.QueryRow(ctx, UpdateAuthorReturnRecord, arg.ID, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return &i, err
}
